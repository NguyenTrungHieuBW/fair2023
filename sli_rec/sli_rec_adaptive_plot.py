import matplotlib.pyplot as plt
import numpy as np

# Sample data (train_accuracy_list and test_accuracy_list)
train_accuracy_list = [0.5667890625, 0.584671875, 0.617671875, 0.6437578125, 0.656640625, 0.66759375, 0.67684375, 0.6836796875, 0.6912578125, 0.6979375, 0.7054140625, 0.7154609375, 0.7217109375, 0.72896875, 0.734, 0.7381796875, 0.7449921875, 0.75021875, 0.7480234375, 0.7556796875, 0.75496875, 0.75984375, 0.276328125, 0.7858046875, 0.7855, 0.78565625, 0.784984375, 0.7855859375, 0.7849921875, 0.7866796875, 0.7873359375, 0.7874921875, 0.7861484375, 0.78984375, 0.79125, 0.7895859375, 0.7896875, 0.790953125, 0.79378125, 0.7933984375, 0.794421875, 0.7956953125, 0.7967421875, 0.7958984375, 0.79753125, 0.57703125, 0.824671875, 0.8250703125, 0.822578125, 0.823609375, 0.8206015625, 0.8206484375, 0.818375, 0.816375, 0.8174140625, 0.8156171875, 0.817453125, 0.8191171875, 0.81753125, 0.8173125, 0.815609375, 0.8143828125, 0.8167890625, 0.8146953125, 0.8163125, 0.81640625, 0.81721875, 0.0398359375, 0.8469765625, 0.8449375, 0.84228125, 0.8419296875, 0.839265625, 0.8372890625, 0.83815625, 0.8349921875, 0.83671875, 0.83721875, 0.8344375, 0.831671875, 0.8328359375, 0.832609375, 0.8306328125, 0.8318359375, 0.82859375, 0.829828125
                       ]  # Include all the values here
test_accuracy_list = [0.577449710515583, 0.5957009643085481, 0.6311254286864522, 0.6422723145231366, 0.6596656279829771, 0.6550521102219927, 0.6703740366045569, 0.6767622059192864, 0.6887261228704181, 0.6869284239206723, 0.696817496694359, 0.697964105953183, 0.7035928626742385, 0.717389625898636, 0.7140880826520255, 0.720836367906217, 0.7340483027878162, 0.7305802419189331, 0.7333488135099042, 0.7376045200648724, 0.7367846080182321, 0.74231598936656, 0.7484200991917099, 0.7439638800884438, 0.7478796371369861, 0.7504419343152733, 0.7486119689742006, 0.7504759292720702, 0.7523364324389996, 0.7555025720879412, 0.754896424883841, 0.7544769617965926, 0.7610103298415212, 0.7595888800884438, 0.7607856174997282, 0.7605355529669455, 0.7616677575648046, 0.7661464479268674, 0.766366550801769, 0.7661959998805805, 0.7695816662364481, 0.7670401117207158, 0.7707495943565743, 0.7718253328003831, 0.768494404094639, 0.7708746266229656, 0.7705755863352172, 0.7693534967637148, 0.7710866629308072, 0.7685860176029806, 0.7699227680788252, 0.7736904454649757, 0.7694445340733093, 0.776453831390308, 0.7736068985544656, 0.776948198622259, 0.7772472389100075, 0.777745063242127, 0.7781593406637366, 0.7723502378581908, 0.7808449415429449, 0.7788611346750943, 0.7840871377033122, 0.781830218845135, 0.7844610821357633, 0.7822323963699971, 0.7816418061935846, 0.784816012440358, 0.780184056719493, 0.7768352662526152, 0.7806841857850583, 0.7812223431063363, 0.7797761173302449, 0.7806790001194195, 0.7814257365868272, 0.7793266926158872, 0.7841176755291688, 0.7842640266568622, 0.7804208689888051, 0.7811071059724751, 0.7821644064871749, 0.7813686942340298, 0.7817772097912534, 0.7849606350025813, 0.7863411755985247, 0.7836544223525934
                      ]  # Include all the values here

# x_values = range(len(train_accuracy_list))

# # Create a smoother x-axis with more data points using NumPy's linspace
# x_smooth = np.linspace(0, len(train_accuracy_list) - 1, 1000)

# # Use the 'spline' interpolation method for a smoother curve
# train_accuracy_smooth = np.interp(x_smooth, x_values, train_accuracy_list)
# test_accuracy_smooth = np.interp(x_smooth, x_values, test_accuracy_list)

# # Create the plot and plot the smoothed data
# plt.plot(x_smooth, train_accuracy_smooth, label='Train Accuracy', color='blue')
# plt.plot(x_smooth, test_accuracy_smooth, label='Test Accuracy', color='red')

# # Add labels and title
# plt.xlabel('Epochs')
# plt.ylabel('Accuracy')
# plt.title('Train and Test Accuracy Over Epochs')

# # Add a legend to differentiate between train and test accuracy lines
# plt.legend()

# # Show the plot
# plt.show()

x_values = range(1, len(train_accuracy_list) + 1)

# Create the plot and plot the data
plt.figure(figsize=(10, 6))  # Adjust the figure size as needed
plt.plot(x_values, train_accuracy_list, label='train_accuracy_list',
         color='blue', linestyle='-', marker='o')
plt.plot(x_values, test_accuracy_list, label='test_accuracy_list',
         color='red', linestyle='-', marker='o')

# Add labels and title
plt.xlabel('Epochs')
plt.ylabel('AUC')
plt.title('AUC Comparison between sli_rec_adaptive and test_accuracy_list')

# Add a grid for better visibility
plt.grid(True)

# Add a legend to differentiate between sli_rec_adaptive and test_accuracy_list
plt.legend()

# Show the plot
plt.tight_layout()  # Adjust the layout for better spacing
plt.show()
